{"categories":[{"title":"aws","uri":"https://rlmitchell.github.io/categories/aws/"},{"title":"documentation","uri":"https://rlmitchell.github.io/categories/documentation/"},{"title":"markdown","uri":"https://rlmitchell.github.io/categories/markdown/"},{"title":"python","uri":"https://rlmitchell.github.io/categories/python/"}],"posts":[{"content":"Sending email with AWS Simple Email Service (SES) and Python  The first thing we need is our AWSCLI credentials. Having multiple profiles in the AWSCLI credentials file, we need to set our credentials when we instantiate the boto3 client. So we have a simple dict in a file we will import.\n# boto3_credentials.py boto3_credentials = { 'aws_access_key_id':'\u0026lt;YOUR_ACCESS_KEY_ID\u0026gt;', 'aws_secret_access_key':'\u0026lt;YOUR_SECRET_ACCESS_KEY\u0026gt;', 'region_name':'us-east-2' }   Here is our SESEmail class. It takes a credentials dict, a paramaters dict, and a debug boolean to instantiate. To send the email we simple call the object.\n# ses_email.py import boto3 import subprocess from pprint import pprint class SESEmail: def __init__(self, creds, params, debug=False): self.creds = creds self.__dict__.update(params) self.debug = debug self.client = boto3.client( 'ses', region_name = self.creds['region_name'], aws_access_key_id = self.creds['aws_access_key_id'], aws_secret_access_key = self.creds['aws_secret_access_key'] ) def __call__(self): response = self.send_email() if self.debug: pprint(self.__dict__) pprint(response) def send_email(self): response = self.client.send_email( Destination={'ToAddresses': self.to_address_list }, Message={ 'Body': { 'Text': { 'Charset': 'UTF-8', 'Data': self.body }, }, 'Subject': { 'Charset': 'UTF-8', 'Data': self.subject }, }, Source = self.from_address ) return response   Here is a working example with some information redacted (all caps inside \u0026lt;\u0026gt;)\n$ python3 Python 3.8.10 (default, Jun 22 2022, 20:18:18) [GCC 9.4.0] on linux Type \u0026quot;help\u0026quot;, \u0026quot;copyright\u0026quot;, \u0026quot;credits\u0026quot; or \u0026quot;license\u0026quot; for more information. \u0026gt;\u0026gt;\u0026gt; from boto3_credentials import boto3_credentials as creds \u0026gt;\u0026gt;\u0026gt; from ses_email import SESEmail \u0026gt;\u0026gt;\u0026gt; params = { ... 'from_address':'\u0026lt;FROM@TEST.COM\u0026gt;', ... 'to_address_list':['\u0026lt;TO@TEST.COM\u0026gt;'], ... 'subject':'\u0026lt;SOME SUBJECT STRING\u0026gt;', ... 'body':'\u0026lt;SOME BODY STRING\u0026gt;' ... } \u0026gt;\u0026gt;\u0026gt; SESEmail(creds, params, debug=True)() {'body': '\u0026lt;SOME BODY STRING\u0026gt;', 'client': \u0026lt;botocore.client.SES object at 0x7f0a983dec10\u0026gt;, 'creds': {'aws_access_key_id': '\u0026lt;YOUR_ACCESS_KEY_ID\u0026gt;', 'aws_secret_access_key': '\u0026lt;YOUR_SECRET_ACCESS_KEY\u0026gt;', 'region_name': 'us-east-2'}, 'debug': True, 'from_address': '\u0026lt;FROM@TEST.COM\u0026gt;', 'subject': '\u0026lt;SOME SUBJECT STRING\u0026gt;', 'to_address_list': ['\u0026lt;TO@TEST.COM\u0026gt;']} {'MessageId': '010f01842a8bf60a-4ec8b0ad-963e-4add-83d2-2de748d3011a-000000', 'ResponseMetadata': {'HTTPHeaders': {'connection': 'keep-alive', 'content-length': '326', 'content-type': 'text/xml', 'date': 'Sun, 30 Oct 2022 20:18:46 GMT', 'x-amzn-requestid': '088403a4-7754-4c37-87cb-38041f3e5c95'}, 'HTTPStatusCode': 200, 'RequestId': '088403a4-7754-4c37-87cb-38041f3e5c95', 'RetryAttempts': 0}} \u0026gt;\u0026gt;\u0026gt; quit() $  ","id":0,"section":"posts","summary":"Sending email with AWS Simple Email Service (SES) and Python  The first thing we need is our AWSCLI credentials. Having multiple profiles in the AWSCLI credentials file, we need to set our credentials when we instantiate the boto3 client. So we have a simple dict in a file we will import.\n# boto3_credentials.py boto3_credentials = { 'aws_access_key_id':'\u0026lt;YOUR_ACCESS_KEY_ID\u0026gt;', 'aws_secret_access_key':'\u0026lt;YOUR_SECRET_ACCESS_KEY\u0026gt;', 'region_name':'us-east-2' }   Here is our SESEmail class. It takes a credentials dict, a paramaters dict, and a debug boolean to instantiate.","tags":["aws","ses","python"],"title":"Sending email with AWS Simple Email Service (SES) and Python","uri":"https://rlmitchell.github.io/2022/10/2022.10.30-python-send-email-with-aws-ses/","year":"2022"},{"content":"How to write comments in markdown This is super simple but, I mention it because I\u0026rsquo;ve been wanting a way to put comments into some of my markdown documents. I came across this solution today and it seems to work well at least in Hugo.\nUsing link labels to achieve it: [comment]: \u0026lt;\u0026gt; (this is how to make a md comment)\nreference: stackoverflow post\n","id":1,"section":"posts","summary":"How to write comments in markdown This is super simple but, I mention it because I\u0026rsquo;ve been wanting a way to put comments into some of my markdown documents. I came across this solution today and it seems to work well at least in Hugo.\nUsing link labels to achieve it: [comment]: \u0026lt;\u0026gt; (this is how to make a md comment)\nreference: stackoverflow post","tags":["markdown"],"title":"How to write comments in markdown","uri":"https://rlmitchell.github.io/2022/10/2022.10.29-markdown-comments/","year":"2022"}],"tags":[{"title":"aws","uri":"https://rlmitchell.github.io/tags/aws/"},{"title":"markdown","uri":"https://rlmitchell.github.io/tags/markdown/"},{"title":"python","uri":"https://rlmitchell.github.io/tags/python/"},{"title":"ses","uri":"https://rlmitchell.github.io/tags/ses/"}]}