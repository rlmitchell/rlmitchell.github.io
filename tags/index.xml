<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tags on robmitchell.info</title>
    <link>https://rlmitchell.github.io/tags/</link>
    <description>Recent content in Tags on robmitchell.info</description>
    <generator>Hugo -- gohugo.io</generator>
    
        <atom:link href="https://rlmitchell.github.io/tags/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Purging old manual snapshots in AWS RDS with Python</title>
      <link>https://rlmitchell.github.io/2022/11/2022.11.11-purge-old-rds-manual-snapshots-with-boto3/</link>
      <pubDate>Fri, 11 Nov 2022 03:48:00 -0500</pubDate>
      
      <guid>https://rlmitchell.github.io/2022/11/2022.11.11-purge-old-rds-manual-snapshots-with-boto3/</guid>
      <description>import boto3 from pprint import pprint class AWSRDSManualSnapshotPurger: def __init__(self, DBIdentifier, access_key=None, secret_key=None): if not access_key: self.client = boto3.client(&#39;rds&#39;) else: self.client = boto3.client(&#39;rds&#39;, region_name = &#39;us-east-1&#39;, aws_access_key_id = access_key, aws_secret_access_key = secret_key) self.db_identifier = DBIdentifier self.number_to_keep = 3 self.manual_snapshots_list = self.get_snapshots_list() def get_snapshots_list(self): manual_snapshots = [] for snapshot in self.client.describe_db_snapshots(SnapshotType=&#39;manual&#39;,DBInstanceIdentifier=self.db_identifier).get(&#39;DBSnapshots&#39;, None): manual_snapshots.append( (snapshot[&#39;SnapshotCreateTime&#39;], snapshot[&#39;DBSnapshotIdentifier&#39;]) ) manual_snapshots.sort() return manual_snapshots def purge_snapshots(self): while len(self.manual_snapshots_list) &amp;gt; self.number_to_keep: del_snapshot = self.manual_snapshots_list.pop(0) print(&#39;delete: &#39; + str(del_snapshot)) #self.</description>
    </item>
    
    <item>
      <title>Getting send quota in AWS SES with Python</title>
      <link>https://rlmitchell.github.io/2022/11/2022.11.11-aws-ses-get-quota/</link>
      <pubDate>Fri, 11 Nov 2022 02:48:00 -0500</pubDate>
      
      <guid>https://rlmitchell.github.io/2022/11/2022.11.11-aws-ses-get-quota/</guid>
      <description>Getting send quota with Python import boto3 from pprint import pprint class AWSSESQuota: def __init__(self, access_key=None, secret_key=None): self.threshold = 5000 if not access_key: self.client = boto3.client(&#39;ses&#39;) else: self.client = boto3.client(&#39;ses&#39;, region_name = &#39;us-east-1&#39;, aws_access_key_id = access_key, aws_secret_access_key = secret_key) def get_sent(self): return self.client.get_send_quota()[&#39;SentLast24Hours&#39;] def over_threshold(self): return int(self.get_sent()) &amp;gt; self.threshold if __name__ == &#39;__main__&#39;: quota = AWSSESQuota() pprint(quota.get_sent()) pprint(quota.over_threshold())   Example output:
$ python3 quota-example.py 482.0 False $   Getting send quota with AWSCLI $ aws ses get-send-quota --region us-east-1 { &amp;quot;Max24HourSend&amp;quot;: 50000.</description>
    </item>
    
    <item>
      <title>Listing all services and codes in AWS with Python</title>
      <link>https://rlmitchell.github.io/2022/11/2022.11.11-aws-get-all-services-listing/</link>
      <pubDate>Fri, 11 Nov 2022 01:48:00 -0500</pubDate>
      
      <guid>https://rlmitchell.github.io/2022/11/2022.11.11-aws-get-all-services-listing/</guid>
      <description>Here&amp;rsquo;s how you can get all the service names and associated service codes in AWS. The code also shows how to page through the output easily.
 import boto3 from pprint import pprint services = [] client = boto3.client(&#39;service-quotas&#39;) response = client.list_services(MaxResults=100) next_token = response.get(&#39;NextToken&#39;) services += response[&#39;Services&#39;] while next_token: response = client.list_services(NextToken=next_token,MaxResults=100) services += response[&#39;Services&#39;] next_token = response.get(&#39;NextToken&#39;,False) #pprint(services) pprint(services[:4]) #limit the example output   More formally:</description>
    </item>
    
    <item>
      <title>Blank lines in markdown</title>
      <link>https://rlmitchell.github.io/2022/11/2022.11.11-markdown-blank-lines/</link>
      <pubDate>Fri, 11 Nov 2022 00:48:00 -0500</pubDate>
      
      <guid>https://rlmitchell.github.io/2022/11/2022.11.11-markdown-blank-lines/</guid>
      <description> To leave a blank line in markdown simply leave a blank line followed by a line with only &amp;amp;nbsp; html spacing then followed by another blank line.
 Works in AWS CodeCommit markdown and Hugo markdown.
 Example:
Some text here &amp;amp;nbsp; Some more text here  </description>
    </item>
    
    <item>
      <title>Using a list of dictionaries in Ansible</title>
      <link>https://rlmitchell.github.io/2022/11/2022.11.01-using-list-of-dicts-ansible/</link>
      <pubDate>Tue, 01 Nov 2022 10:11:00 -0500</pubDate>
      
      <guid>https://rlmitchell.github.io/2022/11/2022.11.01-using-list-of-dicts-ansible/</guid>
      <description>Sometimes you need more that a simple list. In Ansible you can use a list of dictionaries to give each item in the list more than one attribute.
 Here is an example playbook that:
 sets the my_list variable to a list of dictionaries use each of the dictionary attributes in a debug statement  - hosts: localhost become: no gather_facts: no vars: my_list: - id: &#39;id 1&#39; desc: &#39;desc 1&#39; - id: &#39;id 2&#39; desc: &#39;desc 2&#39; tasks: - name: print out dictionary values debug: msg: &amp;quot;{{ item.</description>
    </item>
    
    <item>
      <title>Removing old backups in S3 with Bash</title>
      <link>https://rlmitchell.github.io/2022/10/2022.10.30-removing-old-backups-in-s3-with-bash/</link>
      <pubDate>Sun, 30 Oct 2022 17:14:00 -0500</pubDate>
      
      <guid>https://rlmitchell.github.io/2022/10/2022.10.30-removing-old-backups-in-s3-with-bash/</guid>
      <description>Requirements:  All backup objects in S3 start with a common prefix. All backup objects in S3 have a sortable date/timestamp in the object&amp;rsquo;s name. Keep the most current N backups, delete the rest. Use AWSCLI and Bash so it can be added to cron.   Prerequisites The first thing we need to know how to do is create a sorted array. In this case we need to create the array with the output of another command.</description>
    </item>
    
    <item>
      <title>Sending email with AWS Simple Email Service (SES) and Python</title>
      <link>https://rlmitchell.github.io/2022/10/2022.10.30-python-send-email-with-aws-ses/</link>
      <pubDate>Sun, 30 Oct 2022 13:50:00 -0500</pubDate>
      
      <guid>https://rlmitchell.github.io/2022/10/2022.10.30-python-send-email-with-aws-ses/</guid>
      <description>The first thing we need is our AWSCLI credentials. Having multiple profiles in the AWSCLI credentials file, we need to set our credentials when we instantiate the boto3 client. So we have a simple dict in a file we will import.
# boto3_credentials.py boto3_credentials = { &#39;aws_access_key_id&#39;:&#39;&amp;lt;YOUR_ACCESS_KEY_ID&amp;gt;&#39;, &#39;aws_secret_access_key&#39;:&#39;&amp;lt;YOUR_SECRET_ACCESS_KEY&amp;gt;&#39;, &#39;region_name&#39;:&#39;us-east-2&#39; }   Here is our SESEmail class. It takes a credentials dict, a paramaters dict, and a debug boolean to instantiate.</description>
    </item>
    
    <item>
      <title>How to write comments in markdown</title>
      <link>https://rlmitchell.github.io/2022/10/2022.10.29-markdown-comments/</link>
      <pubDate>Sat, 29 Oct 2022 20:48:00 -0500</pubDate>
      
      <guid>https://rlmitchell.github.io/2022/10/2022.10.29-markdown-comments/</guid>
      <description>This is super simple but, I mention it because I&amp;rsquo;ve been wanting a way to put comments into some of my markdown documents. I came across this solution today and it seems to work well at least in Hugo.
Using link labels to achieve it: [comment]: &amp;lt;&amp;gt; (this is how to make a md comment)
reference: stackoverflow post</description>
    </item>
    
    <item>
      <title>about me</title>
      <link>https://rlmitchell.github.io/about/</link>
      <pubDate>Mon, 30 May 2022 21:34:45 -0500</pubDate>
      
      <guid>https://rlmitchell.github.io/about/</guid>
      <description> Bookmarks  hugo hugo-pure-theme  </description>
    </item>
    
  </channel>
</rss>
